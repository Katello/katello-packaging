#!/usr/bin/ruby

require "socket"
require "optparse"
require "rubygems"
require 'yaml'

raise 'Must run as root' unless Process.uid == 0

def disable_system_check_option?
  katello_installer_rpm = `rpm -qa | grep katello-installer`
  katello_installer_version = katello_installer_rpm[/(\d+\.)(\d+\.)(\d+)/]
  Gem::Version.new(katello_installer_version) >= Gem::Version.new("3.2.0")
end

def get_default_program
  case DEFAULT_SCENARIO
  when "katello"
    return "foreman"
  when FOREMAN_PROXY_CONTENT
    return "foreman"
  else
    return DEFAULT_SCENARIO
  end
end

# keep as variables for easy changing in backports
FOREMAN_PROXY_CONTENT = "foreman-proxy-content"
DEFAULT_SCENARIO = File.basename(File.readlink("/etc/foreman-installer/scenarios.d/last_scenario.yaml")).split(".")[0]
DEFAULT_PROGRAM =  get_default_program
@proxy = "Foreman Proxy"
@plural_proxy = "Foreman Proxies"

@options = {}
@options[:program] = DEFAULT_PROGRAM
@options[:scenario] = DEFAULT_SCENARIO
@options[:system_check] = false
@foreman_proxy_content = @options[:scenario] == FOREMAN_PROXY_CONTENT

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: katello-change-hostname HOSTNAME [OPTIONS]"
  opt.separator  ""
  opt.separator  "Example:"
  opt.separator  " katello-change-hostname foo.example.com -u admin -p changeme"
  opt.separator  ""
  opt.separator  "Options"

  opt.on("-u","--username USERNAME","admin username (required)") do |username|
    @options[:username] = username
  end

  opt.on("-p","--password PASSWORD","admin password (required)") do |password|
    @options[:password] = password
  end

  opt.on("-g","--program PROGRAM","name of the program you are modifying (defaults to #{DEFAULT_PROGRAM})") do |program|
    @options[:program] = program
  end

  opt.on("-S","--scenario SCENARIO","name of the scenario you are modifying (defaults to #{DEFAULT_SCENARIO})") do |scenario|
    @options[:scenario] = scenario
  end

  if disable_system_check_option?
    opt.on("-d","--disable-system-checks","runs the installer with --disable-system-checks") do |system_check|
      @options[:system_check] = true
    end
  end

  opt.on("-y", "--assumeyes", "Answer yes for all questions") do |confirm|
    @options[:confirm] = confirm
  end

  if @foreman_proxy_content
    opt.on("-c",
           "--certs-tar CERTS_TAR",
           "the path to the certs tar generated on the #{DEFAULT_PROGRAM} server with the new hostname (required for #{@plural_proxy})") do |certs_tar|
      @options[:certs_tar] = certs_tar
    end
  end

  opt.on("-h","--help","help") do
    puts opt_parser
    exit
  end
end
opt_parser.parse!

def hammer_ping_success
  return true if @foreman_proxy_content
  hammer_ping = `hammer ping`
  success = $?.success?
  service_failed = hammer_ping.include? "FAIL"
  success && !service_failed
end

def timestamp
  Time.now.strftime("%Y%m%d%H%M")
end

def get_hostname
  Socket.gethostname.chomp
end

def yesno
  begin
    system("stty raw -echo")
    str = STDIN.getc
  ensure
    system("stty -raw echo")
  end
  if str.chr.downcase == "y"
    return true
  elsif str.chr.downcase == "n"
    return false
  else
    puts "Invalid Character. Try again: [y/n]"
    yesno
  end
end

def fail_with_message(message, opt_parser=nil)
  STDOUT.puts message
  puts opt_parser if opt_parser
  exit(false)
end

def move_file(original, backup, reverse=false)
  STDOUT.puts("original " + original)
  STDOUT.puts("backup " + backup)
  base_original = File.dirname(original)
  base_backup = File.dirname(backup)
  original_filename = File.basename(original)
  backup_filename = File.basename(backup)
  if reverse
    `mv #{base_backup}/#{backup_filename} #{base_original}`
  else
    STDOUT.puts("mv #{base_original}/#{backup_filename} #{base_backup}")
    `mv #{base_original}/#{original_filename} #{base_backup}`
  end
  true
end

def check_for_certs_tar
  STDOUT.puts "Checking for certs tarball"
  if @options[:certs_tar]
    if File.file?(@options[:certs_tar])
      true
    else
      fail_with_message("#{@options[:certs_tar]} does not exist! Please check the file path and try again")
    end
  else
    fail_with_message("You must specify --certs-tar argument when on a #{@proxy}." \
                      " These can be generated on the #{DEFAULT_PROGRAM} server using foreman-proxy-certs-generate and copied to this machine.")
  end
end

def get_fpc_answers
  register_in_foreman = false
  certs_tar = @options[:certs_tar]
  " --foreman-proxy-register-in-foreman #{register_in_foreman} --foreman-proxy-content-certs-tar #{certs_tar}"
end

def succesful_hostname_change_message
  STDOUT.puts "**** Hostname change complete! **** \n" \
               "You will need to re-register any #{@options[:program]} clients that are registered to this server. " \
               "When re-registering clients, you will have to reinstall the bootstrap RPM. \n"

  if @foreman_proxy_content
    STDOUT.print "IMPORTANT: You will have to update the Name and URL of the Smart Proxy in #{@options[:program].capitalize} to the new hostname.\n"
  else
    STDOUT.print "
    For #{@plural_proxy}, you will need to regenerate the certs on the #{@options[:scenario].capitalize} server and reinstall the #{@proxy}
    If you want to use custom certificates, re-run the #{@options[:program]}-installer with custom certificate options
    Short hostnames have not been updated, please update those manually.\n"
  end
  STDOUT.print ""
  exit(true)
end

def warning_message
  STDOUT.print("***WARNING*** This script will modify your system. " \
               "You will need to re-register any #{@options[:program]} clients registered to this system after script completion.")
  unless @foreman_proxy_content
    STDOUT.print(" #{ @plural_proxy } will have to be re-registered and reinstalled. If you are using custom certificates, you " \
                 "will have to run the #{@options[:program]}-installer again with custom certificate options after this script completes.")
  end
  STDOUT.print(" Have you taken the necessary precautions (backups, snapshots, etc...) and want to proceed with " \
               "changing your hostname? \n [y/n]:")
end

def installer_command
  installer = "#{@options[:program]}-installer --scenario #{@options[:scenario]} -v"
  if @foreman_proxy_content
    installer << get_fpc_answers
  else
    installer << " --certs-regenerate-ca=true --certs-regenerate=true --foreman-proxy-register-in-foreman true"
  end
  installer << " --disable-system-checks" if @options[:system_check]
end

def move_certs(tmp_backup, scenario_answers, reverse = false)
  # This method enables us to easily rollback any moving around of files
  STDOUT.puts "Backing up old certs"
  ssl_build_dir = scenario_answers["certs"]["ssl_build_dir"]

  move_file("#{scenario_answers["certs"]["pki_dir"]}{,.bak}", "#{tmp_backup}/pki_dir", reverse)
  move_file("/etc/pki/katello-certs-tools{,.bak}", "#{tmp_backup}/pki_dir", reverse)
  move_file("#{scenario_answers["foreman_proxy"]["ssl_ca"]}", "#{tmp_backup}/ssl_ca", reverse)
  move_file("#{scenario_answers["foreman_proxy"]["ssl_cert"]}", "#{tmp_backup}/ssl_cert", reverse)
  move_file("#{scenario_answers["foreman_proxy"]["ssl_key"]}", "#{tmp_backup}/ssl_key", reverse)
  move_file("#{scenario_answers["foreman_proxy"]["foreman_ssl_ca"]}", "#{tmp_backup}/foreman_ssl_ca", reverse)
  move_file("#{scenario_answers["foreman_proxy"]["foreman_ssl_cert"]}", "#{tmp_backup}/foreman_ssl_cert", reverse)
  move_file("#{scenario_answers["foreman_proxy"]["foreman_ssl_key"]}", "#{tmp_backup}/foreman_ssl_key", reverse)
  move_file("/etc/pki/katello/nssdb", "#{tmp_backup}/foreman_ssl_key", reverse)
  move_file("#{ssl_build_dir}", "#{tmp_backup}/ssl_build_dir", reverse)
  move_file("/var/www/html/pub/*.rpm", "#{tmp_backup}/public_rpms", reverse)
  move_file("/etc/foreman-installer/scenarios.d/last_scenario.yaml", "#{tmp_backup}/last_scenario", reverse)

  unless @foreman_proxy_content
    move_file("/etc/candlepin/certs/amqp{,.bak}", "#{tmp_backup}/amqp", reverse)
    move_file("/etc/tomcat/keystore", "#{tmp_backup}/tomcat_keystore", reverse)
    move_file("/etc/foreman/old-certs", "#{tmp_backup}/old-certs", reverse)
    move_file("/etc/pki/katello/keystore", "#{tmp_backup}/keystore", reverse)
    move_file("#{scenario_answers["foreman"]["client_ssl_ca"]}", "#{tmp_backup}/client_ssl_ca", reverse)
    move_file("#{scenario_answers["foreman"]["client_ssl_cert"]}", "#{tmp_backup}/client_ssl_cert", reverse)
    move_file("#{scenario_answers["foreman"]["client_ssl_key"]}", "#{tmp_backup}/client_ssl_key", reverse)
    move_file("#{scenario_answers["foreman_proxy"]["ssldir"]}", "#{tmp_backup}/foreman_proxy/ssldir", reverse)
  end
  STDOUT.puts "Important files and directories are backed up in #{tmp_backup}"
end

def installer_dry_run
  installer_precheck = installer_command + " -n"
  STDOUT.puts("Performing a dry run of the installer with: \n #{installer_precheck}")
  installer_output = `#{installer_precheck}`
  installer_success = $?.success?

  unless installer_success
    STDOUT.puts("#{installer_output}\nDry run of the installer failed! No changes have  been made to your system. Failed output is above.")
  end
  installer_success
end

def update_default_proxy(old_hostname, new_hostname)
  STDOUT.puts "Updating default #{@proxy}"
  default_capsule_id = `hammer -u #{@options[:username]} -p #{@options[:password]} capsule list | grep #{old_hostname} | awk '{ print $1 }'`[0]
  # Incorrect error message is piped to /dev/null, can be removed when http://projects.theforeman.org/issues/18186 is fixed
  `hammer -u #{@options[:username]} -p #{@options[:password]} capsule update --id #{default_capsule_id} --url https://#{new_hostname}:9090 --new-name #{new_hostname} 2> /dev/null`
end

def change_system_hostname(old_hostname, new_hostname)
  STDOUT.puts "updating hostname in /etc/hosts"
  `sed -i -e 's/#{old_hostname}/#{new_hostname}/g' /etc/hosts`

  STDOUT.puts "updating hostname in foreman installer scenarios"
    `sed -i -e 's/#{old_hostname}/#{new_hostname}/g' /etc/foreman-installer/scenarios.d/*.yaml`

  STDOUT.puts "updating hostname in /etc/hostname"
  `sed -i -e 's/#{old_hostname}/#{@new_hostname}/g' /etc/hostname`
  STDOUT.puts "setting hostname"
  `hostnamectl set-hostname #{@new_hostname}`

  # override environment variable (won't be updated until bash login)
  ENV['HOSTNAME'] = new_hostname

  STDOUT.puts "checking if hostname was changed"
  STDOUT.puts "get hname " + get_hostname
  STDOUT.puts "new hostname " + new_hostname
  if get_hostname != new_hostname
    fail_with_message("The new hostname was not changed successfully, exiting script")
  end
end

def precheck(response)
  unless response
    fail_with_message("Hostname change aborted, no changes have been made to your system")
  end

  unless @options[:username] && @options[:password]
    fail_with_message("Username and/or Password options are missing!", opt_parser)
  end

  if ARGV[0] && ARGV.count >= 1
    @new_hostname = ARGV[0]
  else
    fail_with_message("Please specify a hostname.", opt_parser)
  end
  STDOUT.puts "\nChecking overall health of server"
  unless hammer_ping_success
    fail_with_message("There is a problem with the server, please check 'hammer ping'")
  end
end

if @options[:confirm]
  response = true
else
  STDOUT.print(warning_message)
  response = yesno
end
precheck(response)

if @foreman_proxy_content
  check_for_certs_tar
end

# Get the hostname from your system
old_hostname = get_hostname

unless @foreman_proxy_content
  update_default_proxy(old_hostname, @new_hostname)
end

STDOUT.puts "stopping services"
`katello-service stop`

scenario_answers = YAML.load_file("/etc/foreman-installer/scenarios.d/#{@options[:scenario]}-answers.yaml")
tmp_backup = "/tmp/#{old_hostname}-#{timestamp}"
`mkdir #{tmp_backup}`
move_certs(tmp_backup, scenario_answers)
change_system_hostname(old_hostname, @new_hostname)

# A dry run of the installer is performed to check for potential errors.
# If it fails, we revert everything and exit out of the script
unless installer_dry_run
  STDOUT.puts("Potential issues were found on a noop installer run, cleaning up")
  move_certs(tmp_backup, scenario_answers, true)
  change_system_hostname(@new_hostname, old_hostname)
  update_default_proxy(@new_hostname, old_hostname)
  fail_with_message("All changes to your system have been reverted, aborting script")
end

STDOUT.puts "re-running the installer"
installer = installer_command
STDOUT.puts installer
installer_output = `#{installer}`
installer_success = $?.success?
STDOUT.puts installer_output

unless @foreman_proxy_content
  STDOUT.puts "Regenerating ueber certs"
  `foreman-rake katello:regenerate_ueber_certs`
end

STDOUT.puts "Restarting puppet services"
`/sbin/service puppet restart`
`katello-service restart --only puppetserver`

if installer_success
  succesful_hostname_change_message
else
  fail_with_message("Something went wrong with the #{@options[:scenario].capitalize} installer! Please check the above output and the corresponding logs")
end
