#!/usr/bin/ruby

require "socket"
require "optparse"
require "highline/import"

DEFAULT_PROGRAM = "foreman"
DEFAULT_SCENARIO = "katello"
DEFAULT_SSL_DIR = "/root/ssl-build"

def is_rhel_version?(version)
  `cat /etc/redhat-release`[/(\d+\.)/].include?(version)
end

def timestamp
  Time.now.strftime("%Y%m%d%H%M")
end

def get_hostname
  if is_rhel_version?("6")
    hostname = `hostname`
  else
    hostname = Socket.gethostname
  end
  hostname.chomp 
end

response = agree("This will modify your system. Have you taken the necessary precautions (backups, snapshots, etc...) and  want to proceed with changing your hostname? [y/n]")
unless response
  STDOUT.puts "Hostname change aborted, no changes have been made to your system"
  exit
end

options = {}
options[:program] = DEFAULT_PROGRAM
options[:scenario] = DEFAULT_SCENARIO
options[:ssl_dir] = DEFAULT_SSL_DIR

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: katello-change-hostname HOSTNAME [OPTIONS]"
  opt.separator  ""
  opt.separator  "Example:"
  opt.separator  " katello-change-hostname foo.example.com -u admin -p changeme"
  opt.separator  ""
  opt.separator  "Options"

  opt.on("-u","--username USERNAME","admin username REQUIRED") do |username|
    options[:username] = username
  end

  opt.on("-p","--password PASSWORD","admin password REQUIRED") do |password|
    options[:password] = password
  end

  opt.on("-g","--program PROGRAM","name of the program you are modifying (defaults to #{DEFAULT_PROGRAM})") do |program|
    options[:program] = program
  end

  opt.on("-s","--scenario SCENARIO","name of the scenario you are modifying (defaults to #{DEFAULT_SCENARIO})") do |scenario|
    options[:scenario] = scenario
  end

  opt.on("-d","--disable-system-checks","runs the installer with --disable-system-checks") do |system_check|
    options[:system_check] = true
  end

  opt.on("-l","--ssl-dir SSL_DIR","specify the ssl cert directory to replace (defaults to #{DEFAULT_SSL_DIR})") do |ssl_dir|
    options[:ssl_dir] = ssl_dir
  end

  opt.on("-h","--help","help") do
    puts opt_parser
    exit
  end
end
opt_parser.parse!

raise 'Must run as root' unless Process.uid == 0

unless options[:username] && options[:password]
  STDOUT.puts "Username and/or Password options are missing!"
  puts opt_parser
  exit
end

if options[:scenario] == "katello"
  proxy = "Smart Proxy"
  plural_proxy = "Smart Proxies"
else
  proxy = "Capsule"
  plural_proxy = "Capsules"
end

if ARGV[0] && ARGV.count >= 1
  new_hostname = ARGV[0]
else
  puts opt_parser
  exit
end

# Get the hostname from your system
old_hostname = get_hostname

STDOUT.puts "Updating default #{proxy}"
default_capsule_id = `hammer -u #{options[:username]} -p #{options[:password]} capsule list | grep #{old_hostname} | awk '{ print $1 }'`[0]
`hammer -u #{options[:username]} -p #{options[:password]} capsule update --id #{default_capsule_id} --url https://#{new_hostname}:9090 --new-name #{new_hostname} >> /dev/null`

STDOUT.puts "Updating installation media paths"
installation_media_ids = `hammer -u #{options[:username]} -p #{options[:password]} medium list | grep "#{old_hostname}" | awk '{ print $1 }'`.split("\n")
installation_media_paths = `hammer -u #{options[:username]} -p #{options[:password]} medium list | grep "#{old_hostname}" | awk '{ print $5 }'`.split("\n")
installation_media_ids.zip(installation_media_paths).each do |id, path|
  `hammer -u #{options[:username]} -p #{options[:password]} medium update --id #{id} --path #{path.sub! old_hostname, new_hostname}`   
end

if is_rhel_version?("6")
  STDOUT.puts "updating hostname in /etc/sysconfig/network"
  STDOUT.puts("sed -i -e 's/#{old_hostname}/#{new_hostname}/g' /etc/sysconfig/network")
  `sed -i -e 's/#{old_hostname}/#{new_hostname}/g' /etc/sysconfig/network`
  STDOUT.puts "setting hostname"
  `hostname #{new_hostname}`
elsif is_rhel_version?("7")
  STDOUT.puts "updating hostname in /etc/hostname"
  `sed -i -e 's/#{old_hostname}/#{new_hostname}/g' /etc/hostname`
  STDOUT.puts "setting hostname"
  `hostnamectl set-hostname #{new_hostname}`
else
  STDOUT.puts "couldn't find RHEL version: #{RHEL_VERSION} - exiting, no changes have been made to your system"
  exit
end

STDOUT.puts "checking if hostname was changed"
if get_hostname != new_hostname
  STDOUT.puts "the new hostname was not changed successfully, exiting script"
  exit
end

STDOUT.puts "stopping services"
`katello-service stop`

STDOUT.puts "deleting old certs"
`
rm -rf /etc/pki/katello{,.bak}
rm -rf /etc/pki/katello-certs-tools{,.bak}
rm -rf /etc/candlepin/certs/amqp{,.bak}
rm -rf /etc/foreman-proxy/*ssl*
rm -rf /etc/foreman/old-certs
rm -rf /etc/foreman/*.pem
rm -rf /var/lib/puppet/ssl
rm -rf /etc/pki/katello/nssdb
rm -f /etc/tomcat/keystore
rm -f /etc/pki/katello/keystore
cp -r #{options[:ssl_dir]} #{options[:ssl_dir]}.#{old_hostname}#{timestamp}
rm -rf #{options[:ssl_dir]}
`
STDOUT.puts "backed up #{options[:ssl_dir]} to #{options[:ssl_dir]}.#{old_hostname}#{timestamp}"
STDOUT.puts "updating hostname in /etc/hosts"
`sed -i -e 's/#{old_hostname}/#{new_hostname}/g' /etc/hosts`

STDOUT.puts "updating hostname in foreman installer scenarios"
`sed -i -e 's/#{old_hostname}/#{new_hostname}/g' /etc/foreman-installer/scenarios.d/*.yaml`

STDOUT.puts "removing last_scenario.yml file"
`rm -rf /etc/foreman-installer/scenarios.d/last_scenario.yaml`

STDOUT.puts "re-running the installer"

installer = "#{options[:program]}-installer --scenario #{options[:scenario]} -v --certs-regenerate-ca=true --certs-regenerate=true \
             --foreman-proxy-register-in-foreman true"

installer << " --disable-system-checks" if options[:system_check]
STDOUT.puts installer
installer_output = `#{installer}`
STDOUT.puts installer_output

STDOUT.puts "
Hostname change complete!

You will need to re-register any #{plural_proxy} or clients with the #{options[:scenario].capitalize} server. 

When re-registering clients, you will have to reinstall the bootstrap RPM.
Any mention of the #{old_hostname} on your clients will have to change to #{new_hostname} (i.e. /etc/hosts)

For #{plural_proxy}, you will need to regenerate the certs on the #{options[:scenario].capitalize} server and reinstall the #{proxy}

Short hostnames have not been updated, please update those manually.
"
